
import random
import re
from typing import List, Dict, Set, Tuple
from collections import defaultdict

class FillerManager:
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–±–æ—Ä–æ–º –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã—Ö 
    —Ñ—Ä–∞–∑-–∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏—Å—Ç–µ–º—É –≤–∑–≤–µ—à–µ–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫.
    """

    def __init__(self):
        self.categories_priority: Dict[str, int] = {
            'CLARIFYING': 1,
            'SUPPORTIVE': 2,
            'ENCOURAGING_SHORT': 3,
            'ACKNOWLEDGING_LONG': 3,
            'ENCOURAGING_POSITIVE': 4,
            'NEUTRAL': 5
        }
        
        self.keywords_weights: List[Tuple[str, Set[str], int]] = [
            ('SUPPORTIVE', {'–Ω–µ –∑–Ω–∞—é', '–Ω–µ —É–≤–µ—Ä–µ–Ω', '—Å–ª–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å', '–∑–∞—Ç—Ä—É–¥–Ω—è—é—Å—å', '–Ω–µ –ø–æ–º–Ω—é', '–Ω–µ —Å—Ç–∞–ª–∫–∏–≤–∞–ª—Å—è', '–Ω–µ –ø—Ä–∏—Ö–æ–¥–∏–ª–æ—Å—å', '–Ω–µ –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å'}, 10),
            ('CLARIFYING', {'–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ', '–Ω–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª', '–∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É', '–ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —è', '—É—Ç–æ—á–Ω–∏—Ç—å'}, 8),
            ('ENCOURAGING_POSITIVE', {'–∫–æ–Ω–µ—á–Ω–æ', '—Ä–∞–∑—É–º–µ–µ—Ç—Å—è', '—É—Å–ø–µ—à–Ω–æ', '—Å–ø—Ä–∞–≤–∏–ª—Å—è', '—É–ª—É—á—à–∏–ª', '–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–ª', '–¥–æ—Å—Ç–∏–≥', '—Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª', '–≤–Ω–µ–¥—Ä–∏–ª'}, 5)
        ]
        
        self.phrases: Dict[str, List[str]] = {
            'NEUTRAL': ["–¢–∞–∫, –ø–æ–Ω—è–ª–∞. –°–µ–∫—É–Ω–¥—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞", "–•–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ. –°–µ–∫—É–Ω–¥—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞", "–¢–∞–∫, —è—Å–Ω–æ. –°–µ–∫—É–Ω–¥—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞", "–ü—Ä–∏–Ω—è—Ç–æ. –°–µ–∫—É–Ω–¥—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞", "–°–µ–∫—É–Ω–¥–æ—á–∫—É..."],
            'SUPPORTIVE': ["–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, —ç—Ç–æ –Ω–µ–ø—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å. –î–∞–π—Ç–µ –º–Ω–µ –º–æ–º–µ–Ω—Ç.", "–ü–æ–Ω–∏–º–∞—é, –Ω–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å. –î–∞–≤–∞–π—Ç–µ –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ. –°–µ–∫—É–Ω–¥—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞", "–°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å, —ç—Ç–æ —Ç–æ–∂–µ –≤–∞–∂–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å. –°–µ–∫—É–Ω–¥—É.", "–•–æ—Ä–æ—à–æ, –ø—Ä–æ–ø—É—Å—Ç–∏–º —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç. –û–±–¥—É–º—ã–≤–∞—é —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥."],
            'ENCOURAGING_POSITIVE': ["–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–∏–º–µ—Ä, —Å–ø–∞—Å–∏–±–æ! –°–µ–π—á–∞—Å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É—é —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.", "–ó–≤—É—á–∏—Ç —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ. –ú–Ω–µ –Ω—É–∂–Ω–æ –º–≥–Ω–æ–≤–µ–Ω–∏–µ, —á—Ç–æ–±—ã —ç—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.", "–ò–º–µ–Ω–Ω–æ —ç—Ç–æ —è –∏ —Ö–æ—Ç–µ–ª–∞ —É—Å–ª—ã—à–∞—Ç—å. –î–∞–π—Ç–µ –ø–æ–¥—É–º–∞—Ç—å.", "–í–ø–µ—á–∞—Ç–ª—è–µ—Ç. –•–æ—Ä–æ—à–æ, —Å–µ–∫—É–Ω–¥—É."],
            'ENCOURAGING_SHORT': ["–ü–æ–Ω—è–ª–∞. –°–µ–π—á–∞—Å –ø–æ–¥—É–º–∞—é, –∫–∞–∫ –ª—É—á—à–µ —Ä–∞—Å–∫—Ä—ã—Ç—å —ç—Ç—É —Ç–µ–º—É.", "–•–æ—Ä–æ—à–æ. –°–µ–∫—É–Ω–¥—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.", "–ö—Ä–∞—Ç–∫–æ—Å—Ç—å - —Å–µ—Å—Ç—Ä–∞ —Ç–∞–ª–∞–Ω—Ç–∞. –¢–∞–∫, –¥–∞–π—Ç–µ –º–Ω–µ –º–æ–º–µ–Ω—Ç."],
            'ACKNOWLEDGING_LONG': ["–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–∞–∫–æ–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç. –ú–Ω–µ –Ω—É–∂–Ω–æ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –≤—Å—ë —É—á–µ—Å—Ç—å.", "–û—á–µ–Ω—å –ø–æ–¥—Ä–æ–±–Ω–æ, –±–ª–∞–≥–æ–¥–∞—Ä—é. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.", "–Ø –≤–∞—Å —É—Å–ª—ã—à–∞–ª–∞. –ú–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π, —Å–µ–∫—É–Ω–¥—É."],
            'CLARIFYING': ["–î–∞, –∫–æ–Ω–µ—á–Ω–æ, —Å–µ–π—á–∞—Å –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É—é.", "–ë–µ–∑ –ø—Ä–æ–±–ª–µ–º. –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –¥—Ä—É–≥–∏–º.", "–ü–æ–Ω—è–ª–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –°–µ–∫—É–Ω–¥—É."]
        }
        
        self.length_thresholds = { 'very_short': 50, 'long': 500 }
        self.length_bonus_points = 3

    def _analyze_text(self, text: str) -> str:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏—Å—Ç–µ–º—É –æ—á–∫–æ–≤,
        –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é-–ø–æ–±–µ–¥–∏—Ç–µ–ª—è.
        """
        lower_text = text.lower()
        scores = defaultdict(int)
        
        for category, keywords, weight in self.keywords_weights:
            found_count = sum(1 for keyword in keywords if re.search(r'\b' + re.escape(keyword) + r'\b', lower_text))
            if found_count > 0:
                scores[category] += found_count * weight

        text_len = len(text)
        if text_len < self.length_thresholds['very_short']:
            scores['ENCOURAGING_SHORT'] += self.length_bonus_points
        if text_len > self.length_thresholds['long']:
            scores['ACKNOWLEDGING_LONG'] += self.length_bonus_points
            
        if not scores:
            return 'NEUTRAL'
            
        max_score = max(scores.values())
        
        top_categories = [category for category, score in scores.items() if score == max_score]
        
        if len(top_categories) > 1:
            winner = sorted(top_categories, key=lambda cat: self.categories_priority[cat])[0]
            return winner
        else:
            return top_categories[0]

    def get_phrase(self, user_answer: str) -> str:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥. –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –µ–≥–æ
        –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ñ—Ä–∞–∑—É-–∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å.
        """
        if not user_answer or not user_answer.strip():
            category = 'NEUTRAL'
        else:
            category = self._analyze_text(user_answer)
        
        selected_phrase = random.choice(self.phrases[category])
        
        print(f"üí¨ FillerManager: –û—Ç–≤–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ '{category}'. –í—ã–±—Ä–∞–Ω–∞ —Ñ—Ä–∞–∑–∞: '{selected_phrase}'")
        
        return selected_phrase