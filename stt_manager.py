
import threading
import time
import logging
from typing import Callable, Optional, List
from RealtimeSTT import AudioToTextRecorder
from config import Config

class STTManager:
    def __init__(self,
                 on_phrase_detected: Optional[Callable[[], None]] = None,
                 on_silence_detected: Optional[Callable[[List[str]], None]] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è STT-–º–µ–Ω–µ–¥–∂–µ—Ä–∞.
        :param on_phrase_detected: –ö–æ–ª–±—ç–∫, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –ö–ê–ñ–î–û–ô —Ñ—Ä–∞–∑—ã.
        :param on_silence_detected: –ö–æ–ª–±—ç–∫, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è "–¥–ª–∏–Ω–Ω–æ–π" —Ç–∏—à–∏–Ω—ã.
        """
        logging.getLogger().setLevel(logging.WARNING)
        
        self.on_phrase_detected = on_phrase_detected
        self.on_silence_detected = on_silence_detected
        
        self.is_listening = False
        self.full_sentences = []
        self.recorder = None
        self.silence_timer = None
        self.silence_timeout = Config.SILENCE_TIMEOUT
        
        self.listen_thread = None
        self._init_recorder()

    def _init_recorder(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∫–æ—Ä–¥–µ—Ä–∞ —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏."""
        recorder_config = {
            'spinner': False,
            'model': Config.STT_MODEL,
            'language': Config.STT_LANGUAGE,
            'silero_sensitivity': 0.05,
            'webrtc_sensitivity': 3,
            'post_speech_silence_duration': 0.7,
            'min_length_of_recording': 0.5,
            'min_gap_between_recordings': 0,
            
            'enable_realtime_transcription': True,
            'realtime_model_type': 'tiny.en',
            'realtime_processing_pause': 0.02,
            'on_realtime_transcription_update': self._on_realtime_update,
            
            'silero_deactivity_detection': True,
            'beam_size': 5,
            'beam_size_realtime': 3,
            'no_log_file': True,
            'silero_use_onnx': True,
        }
        self.recorder = AudioToTextRecorder(**recorder_config)
        print("STT Recorder –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å real-time –º–æ–¥–µ–ª—å—é –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ç–∞–π–º–µ—Ä–∞.")

    def _on_realtime_update(self, text: str):
        """
        –ö–æ–ª–±—ç–∫ –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¢–û–õ–¨–ö–û –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ç–∞–π–º–µ—Ä–∞ –¥–æ–ª–≥–æ–π –ø–∞—É–∑—ã –≤–æ –≤—Ä–µ–º—è —Ä–µ—á–∏.
        –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ—Ä–∞–∑.
        """
        if not self.is_listening:
            return
            
        if text.strip():
            self._reset_silence_timer_during_speech()

    def _reset_silence_timer_during_speech(self):
        """
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä –¥–æ–ª–≥–æ–π –ø–∞—É–∑—ã –≤–æ –≤—Ä–µ–º—è —Ä–µ—á–∏.
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è real-time –º–æ–¥–µ–ª—å—é –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Ä–µ—á–∏.
        """
        if self.silence_timer:
            self.silence_timer.cancel()
            self.silence_timer = None
            print("\033[91mSTT: ‚è∞ –¢–∞–π–º–µ—Ä –¥–æ–ª–≥–æ–π –ø–∞—É–∑—ã —Å–±—Ä–æ—à–µ–Ω - –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–µ—á—å\033[0m")

    def start_listening(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è. –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
        if self.is_listening:
            print("STT: –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ.")
            return

        self.is_listening = True
        self.full_sentences.clear()
        self.listen_thread = threading.Thread(target=self._listen_loop, daemon=True)
        self.listen_thread.start()
        print("STT: –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ...")

    def stop_listening(self):
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é –∏ –Ω–∞–¥–µ–∂–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É."""
        if not self.is_listening:
            return
            
        self.is_listening = False
        self._cancel_silence_timer()
        print("STT: –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

    def _listen_loop(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è. –†–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–∫–∞ is_listening=True.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–ª–±—ç–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–π —Ñ—Ä–∞–∑—ã.
        """
        while self.is_listening:
            try:
                self.recorder.text(self._process_recognized_phrase)
            except Exception as e:
                if self.is_listening:
                    print(f"STT Listen Error: {e}")
                    time.sleep(1)

    def _process_recognized_phrase(self, text: str):
        """
        –ö–æ–ª–±—ç–∫, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –¥–ª—è –ö–ê–ñ–î–û–ô —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π —Ñ—Ä–∞–∑—ã.
        –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª—å, –ø–æ—Ç–æ–º —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä.
        """
        if not self.is_listening:
            return

        processed_text = self._preprocess_text(text)

        if not processed_text:
            return

        if self.full_sentences and self.full_sentences[-1] == processed_text:
            print(f"STT: –î–£–ë–õ–¨ –ü–†–û–ü–£–©–ï–ù: '{processed_text}'")
            return


        print(f"STT: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –Ω–æ–≤–∞—è —Ñ—Ä–∞–∑–∞: '{processed_text}'")
        self.full_sentences.append(processed_text)

        self._start_silence_timer()

        if self.on_phrase_detected:
            self.on_phrase_detected()

    def _start_silence_timer(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä '–¥–ª–∏–Ω–Ω–æ–π' —Ç–∏—à–∏–Ω—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã."""
        self._cancel_silence_timer()
        self.silence_timer = threading.Timer(self.silence_timeout, self._on_silence_timeout)
        self.silence_timer.start()
        print(f"STT: üïê –ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä –¥–æ–ª–≥–æ–π –ø–∞—É–∑—ã ({self.silence_timeout}—Å)")

    def _cancel_silence_timer(self):
        """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç–∞–π–º–µ—Ä '–¥–ª–∏–Ω–Ω–æ–π' —Ç–∏—à–∏–Ω—ã."""
        if self.silence_timer:
            self.silence_timer.cancel()
            self.silence_timer = None

    def _on_silence_timeout(self):
        """
        –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ "–¥–ª–∏–Ω–Ω–æ–π" —Ç–∏—à–∏–Ω—ã.
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –≤ main.py.
        """
        if not self.is_listening:
            return
            
        if self.full_sentences and self.on_silence_detected:
            sentences_copy = self.full_sentences.copy()
            self.full_sentences.clear()
            print(f"STT: ‚è∞ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–ª–∏–Ω–Ω–∞—è —Ç–∏—à–∏–Ω–∞. –ü–µ—Ä–µ–¥–∞—é {len(sentences_copy)} —Ñ—Ä–∞–∑.")
            self.on_silence_detected(sentences_copy)
        

    def _preprocess_text(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""
        if not text: return ""
        text = text.strip()
        if text.startswith("..."): text = text[3:].strip()
        if text.endswith("..."): text = text[:-3].strip()
        while text and text[0] in '.,?!':
            text = text[1:].strip()
        if text: text = text[0].upper() + text[1:]
        return text